// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Strike_Signup_FullMethodName        = "/message.Strike/Signup"
	Strike_ConfirmChat_FullMethodName   = "/message.Strike/ConfirmChat"
	Strike_Login_FullMethodName         = "/message.Strike/Login"
	Strike_SaltMine_FullMethodName      = "/message.Strike/SaltMine"
	Strike_SendMessages_FullMethodName  = "/message.Strike/SendMessages"
	Strike_UserStatus_FullMethodName    = "/message.Strike/UserStatus"
	Strike_MessageStream_FullMethodName = "/message.Strike/MessageStream"
)

// StrikeClient is the client API for Strike service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrikeClient interface {
	Signup(ctx context.Context, in *InitUser, opts ...grpc.CallOption) (*ServerResponse, error)
	ConfirmChat(ctx context.Context, in *ConfirmChatRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	SaltMine(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Salt, error)
	SendMessages(ctx context.Context, in *MessageStreamPayload, opts ...grpc.CallOption) (*ServerResponse, error)
	UserStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (Strike_UserStatusClient, error)
	MessageStream(ctx context.Context, in *Username, opts ...grpc.CallOption) (Strike_MessageStreamClient, error)
}

type strikeClient struct {
	cc grpc.ClientConnInterface
}

func NewStrikeClient(cc grpc.ClientConnInterface) StrikeClient {
	return &strikeClient{cc}
}

func (c *strikeClient) Signup(ctx context.Context, in *InitUser, opts ...grpc.CallOption) (*ServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, Strike_Signup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strikeClient) ConfirmChat(ctx context.Context, in *ConfirmChatRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, Strike_ConfirmChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strikeClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, Strike_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strikeClient) SaltMine(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Salt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Salt)
	err := c.cc.Invoke(ctx, Strike_SaltMine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strikeClient) SendMessages(ctx context.Context, in *MessageStreamPayload, opts ...grpc.CallOption) (*ServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, Strike_SendMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strikeClient) UserStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (Strike_UserStatusClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Strike_ServiceDesc.Streams[0], Strike_UserStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &strikeUserStatusClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Strike_UserStatusClient interface {
	Recv() (*StatusUpdate, error)
	grpc.ClientStream
}

type strikeUserStatusClient struct {
	grpc.ClientStream
}

func (x *strikeUserStatusClient) Recv() (*StatusUpdate, error) {
	m := new(StatusUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *strikeClient) MessageStream(ctx context.Context, in *Username, opts ...grpc.CallOption) (Strike_MessageStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Strike_ServiceDesc.Streams[1], Strike_MessageStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &strikeMessageStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Strike_MessageStreamClient interface {
	Recv() (*MessageStreamPayload, error)
	grpc.ClientStream
}

type strikeMessageStreamClient struct {
	grpc.ClientStream
}

func (x *strikeMessageStreamClient) Recv() (*MessageStreamPayload, error) {
	m := new(MessageStreamPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StrikeServer is the server API for Strike service.
// All implementations must embed UnimplementedStrikeServer
// for forward compatibility
type StrikeServer interface {
	Signup(context.Context, *InitUser) (*ServerResponse, error)
	ConfirmChat(context.Context, *ConfirmChatRequest) (*ServerResponse, error)
	Login(context.Context, *LoginRequest) (*ServerResponse, error)
	SaltMine(context.Context, *Username) (*Salt, error)
	SendMessages(context.Context, *MessageStreamPayload) (*ServerResponse, error)
	UserStatus(*StatusRequest, Strike_UserStatusServer) error
	MessageStream(*Username, Strike_MessageStreamServer) error
	mustEmbedUnimplementedStrikeServer()
}

// UnimplementedStrikeServer must be embedded to have forward compatible implementations.
type UnimplementedStrikeServer struct {
}

func (UnimplementedStrikeServer) Signup(context.Context, *InitUser) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedStrikeServer) ConfirmChat(context.Context, *ConfirmChatRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmChat not implemented")
}
func (UnimplementedStrikeServer) Login(context.Context, *LoginRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedStrikeServer) SaltMine(context.Context, *Username) (*Salt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaltMine not implemented")
}
func (UnimplementedStrikeServer) SendMessages(context.Context, *MessageStreamPayload) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}
func (UnimplementedStrikeServer) UserStatus(*StatusRequest, Strike_UserStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method UserStatus not implemented")
}
func (UnimplementedStrikeServer) MessageStream(*Username, Strike_MessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageStream not implemented")
}
func (UnimplementedStrikeServer) mustEmbedUnimplementedStrikeServer() {}

// UnsafeStrikeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrikeServer will
// result in compilation errors.
type UnsafeStrikeServer interface {
	mustEmbedUnimplementedStrikeServer()
}

func RegisterStrikeServer(s grpc.ServiceRegistrar, srv StrikeServer) {
	s.RegisterService(&Strike_ServiceDesc, srv)
}

func _Strike_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrikeServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strike_Signup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrikeServer).Signup(ctx, req.(*InitUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strike_ConfirmChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrikeServer).ConfirmChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strike_ConfirmChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrikeServer).ConfirmChat(ctx, req.(*ConfirmChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strike_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrikeServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strike_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrikeServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strike_SaltMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrikeServer).SaltMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strike_SaltMine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrikeServer).SaltMine(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strike_SendMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageStreamPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrikeServer).SendMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strike_SendMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrikeServer).SendMessages(ctx, req.(*MessageStreamPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strike_UserStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StrikeServer).UserStatus(m, &strikeUserStatusServer{ServerStream: stream})
}

type Strike_UserStatusServer interface {
	Send(*StatusUpdate) error
	grpc.ServerStream
}

type strikeUserStatusServer struct {
	grpc.ServerStream
}

func (x *strikeUserStatusServer) Send(m *StatusUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Strike_MessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Username)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StrikeServer).MessageStream(m, &strikeMessageStreamServer{ServerStream: stream})
}

type Strike_MessageStreamServer interface {
	Send(*MessageStreamPayload) error
	grpc.ServerStream
}

type strikeMessageStreamServer struct {
	grpc.ServerStream
}

func (x *strikeMessageStreamServer) Send(m *MessageStreamPayload) error {
	return x.ServerStream.SendMsg(m)
}

// Strike_ServiceDesc is the grpc.ServiceDesc for Strike service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Strike_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.Strike",
	HandlerType: (*StrikeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _Strike_Signup_Handler,
		},
		{
			MethodName: "ConfirmChat",
			Handler:    _Strike_ConfirmChat_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Strike_Login_Handler,
		},
		{
			MethodName: "SaltMine",
			Handler:    _Strike_SaltMine_Handler,
		},
		{
			MethodName: "SendMessages",
			Handler:    _Strike_SendMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserStatus",
			Handler:       _Strike_UserStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MessageStream",
			Handler:       _Strike_MessageStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
