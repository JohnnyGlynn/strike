// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Strike_SendMessages_FullMethodName = "/message.Strike/SendMessages"
	Strike_GetMessages_FullMethodName  = "/message.Strike/GetMessages"
)

// StrikeClient is the client API for Strike service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrikeClient interface {
	SendMessages(ctx context.Context, in *Envelope, opts ...grpc.CallOption) (*Stamp, error)
	GetMessages(ctx context.Context, in *Chat, opts ...grpc.CallOption) (Strike_GetMessagesClient, error)
}

type strikeClient struct {
	cc grpc.ClientConnInterface
}

func NewStrikeClient(cc grpc.ClientConnInterface) StrikeClient {
	return &strikeClient{cc}
}

func (c *strikeClient) SendMessages(ctx context.Context, in *Envelope, opts ...grpc.CallOption) (*Stamp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stamp)
	err := c.cc.Invoke(ctx, Strike_SendMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strikeClient) GetMessages(ctx context.Context, in *Chat, opts ...grpc.CallOption) (Strike_GetMessagesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Strike_ServiceDesc.Streams[0], Strike_GetMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &strikeGetMessagesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Strike_GetMessagesClient interface {
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type strikeGetMessagesClient struct {
	grpc.ClientStream
}

func (x *strikeGetMessagesClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StrikeServer is the server API for Strike service.
// All implementations must embed UnimplementedStrikeServer
// for forward compatibility
type StrikeServer interface {
	SendMessages(context.Context, *Envelope) (*Stamp, error)
	GetMessages(*Chat, Strike_GetMessagesServer) error
	mustEmbedUnimplementedStrikeServer()
}

// UnimplementedStrikeServer must be embedded to have forward compatible implementations.
type UnimplementedStrikeServer struct {
}

func (UnimplementedStrikeServer) SendMessages(context.Context, *Envelope) (*Stamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}
func (UnimplementedStrikeServer) GetMessages(*Chat, Strike_GetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedStrikeServer) mustEmbedUnimplementedStrikeServer() {}

// UnsafeStrikeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrikeServer will
// result in compilation errors.
type UnsafeStrikeServer interface {
	mustEmbedUnimplementedStrikeServer()
}

func RegisterStrikeServer(s grpc.ServiceRegistrar, srv StrikeServer) {
	s.RegisterService(&Strike_ServiceDesc, srv)
}

func _Strike_SendMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Envelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrikeServer).SendMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strike_SendMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrikeServer).SendMessages(ctx, req.(*Envelope))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strike_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Chat)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StrikeServer).GetMessages(m, &strikeGetMessagesServer{ServerStream: stream})
}

type Strike_GetMessagesServer interface {
	Send(*Envelope) error
	grpc.ServerStream
}

type strikeGetMessagesServer struct {
	grpc.ServerStream
}

func (x *strikeGetMessagesServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

// Strike_ServiceDesc is the grpc.ServiceDesc for Strike service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Strike_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.Strike",
	HandlerType: (*StrikeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessages",
			Handler:    _Strike_SendMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessages",
			Handler:       _Strike_GetMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
