syntax = "proto3";

import "google/protobuf/timestamp.proto";

package message;

option go_package="./message";

service Strike {
  //TODO: Just login?
  rpc Signup(InitUser) returns (ServerResponse) {}

  rpc Login(LoginVerify) returns (ServerResponse) {}

  rpc SaltMine(UserInfo) returns (Salt) {}

  rpc UserRequest(UserInfo) returns (UserInfo) {}

  rpc OnlineUsers(UserInfo) returns (Users) {}

  rpc StatusStream(UserInfo) returns (stream StatusUpdate) {}

  rpc SendPayload(StreamPayload) returns (ServerResponse) {}

  rpc PayloadStream(UserInfo) returns (stream StreamPayload) {}

  rpc PollServer(UserInfo) returns (ServerInfo) {}
}

//TODO: Lots of cleaning
message UserInfo {
    string username = 1;
    //UUID as String
    string user_id = 2;
    bytes encryption_public_key = 3;
    bytes signing_public_key = 4;
}

message ServerInfo {
  string server_id = 1;
  string server_name = 2;
  repeated UserInfo users = 3;
}

message Users {
  repeated UserInfo users = 1;
}

//TODO: Getting very verbose here, prune
message Salt {
    bytes salt = 1;
}

message FriendRequest {
  string invite_id = 1;
  string target = 2;
  UserInfo user_info = 4;
}

message FriendResponse {
  string invite_id = 1;
  string target = 2;
  UserInfo user_info = 4;
  bool state = 5;
}

message InitUser {
  string username = 1;
  string user_id = 2;
  string password_hash = 3;
  Salt salt = 4;
  //byte array - https://protobuf.dev/programming-guides/proto3/#scalar
  bytes encryption_public_key = 5; // client Curve25519 public key
  bytes signing_public_key = 6; // client ED25519 signing key
}

message BeginChatRequest {
  string invite_id = 1; //UUID of invite
  string initiator = 2; // client beginning chat username
  string target = 3;    // target client username
  Chat chat = 4;
}

message ConfirmChatRequest {
  string invite_id = 1; //UUID of invite
  string initiator = 2;
  string confirmer = 3; // target user accepting chat
  bool state = 4; // yes/no
  Chat chat = 5;
}

message LoginVerify {
  string username = 1;
  string password_hash = 2;
}

message Chat {
  string id = 1;
  string name = 2;
  
  enum State {
    DEFAULT = 0;
    INIT = 1;
    KEY_EXCHANGE_PENDING = 2;
    KEYS_EXCHANGED = 3;
    ENCRYPTED = 4;
  }

  State state = 5;
  repeated string participants = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

message ServerResponse {
  bool success = 1;
  string message = 2;
  //TODO: Have server sign this?
}

message StatusUpdate {
    string message = 1;  //"online/offline"
    google.protobuf.Timestamp updated_at = 2;
}

// TODO: this is getting messy
message StreamPayload {
  string target = 1;
  string sender = 2;
  oneof payload {
    BeginChatRequest chat_request = 3;
    ConfirmChatRequest chat_confirm = 4;
    Envelope envelope = 5;
    EncryptedEnvelope encenv = 6;
    KeyExchangeRequest key_exch_request = 7;
    KeyExchangeResponse key_exch_response = 8;
    KeyExchangeConfirmation key_exch_confirm = 9;
    FriendRequest friend_request = 10;
    FriendResponse friend_response = 11;
  }
  string info = 12;
}

// -----------------------------------Messages---------------------------------------------
message Envelope {
  bytes Sender_public_key = 1;
  google.protobuf.Timestamp sent_at = 2;
  string to_user = 3;
  string from_user = 4;
  Chat chat = 5;
  string message = 6;

}

message EncryptedEnvelope {
  bytes sender_public_key = 1; // public Curve25519 sender
  bytes recipient_public_key = 2; // public Curve25519 recipient
  string to_user = 3;
  string from_user = 4;
  bytes signature = 5; // sender ED25519 signature of encrypted_payload
  Chat chat = 6;
  bytes nonce = 7; // number once - encryption
  bytes encrypted_message = 8; // encrypted message content
  google.protobuf.Timestamp sent_at = 9; // timestamp
}

// -----------------------------------Key Exchange---------------------------------------------
// TODO: these could proably be a single type
message KeyExchangeRequest {
  string chat_id = 1;
  string target = 2;
  string sender_user_id = 3;
  bytes curve_public_key = 4;
  bytes nonce = 5;
  repeated bytes signatures = 6;
}

message KeyExchangeResponse {
  string chat_id = 1;
  string responder_user_id = 2;
  bytes curve_public_key = 3;
  bytes nonce = 4;
  repeated bytes signatures = 5;
}

message KeyExchangeConfirmation {
  string chat_id = 1;
  bool status = 2;
  string confirmer_user_id = 3;
}

